What happens when you initialize a repository? Why do you need to do it?
- Git automatically adds a hidden folder called '.git' to convert your folder to a git repository.
- We need to do this in order to track your file commits.

How is the staging area different from the working directory and the repository? What value do you think it offers?
- Working Directory is untracked by Git.
- Staging area is ready for commit.
- You can reset files in a staging area by using reset command. Eg git reset lesson_2_reflections.text
- Staging area can be used to commit logical group of codes in separately.

How can you use the staging area to make sure you have one commit per logical change?
-git diff: Shows the difference between your working directory and staging directory
-git diff --staged: Shows the difference between your staging directory and git repository
-git diff commitID1 commitID2: Shows the difference between two committed IDS in GIT repo
Steps:
a) Use diff to see your changes.
b) Choose which files to include
c) Stage them using: git add fileName
d) Commit them using: git commit


What are some situations when branches would be helpful in keeping your history organized? How would branches help?
-To introduce a new experimental feature without blocking the existing application.
-Easier to merge into the main branch.
Steps:
1) git branch: Check your existing branches
2) git branch new_branch: Create a new branch
3) git checkout new_branch: Checkout and start working on new_branch

How do the diagrams help you visualize the branch structure?
-git log --graph --oneline branch1 branch2 branch3
It shows where your commits were in a linear path

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
-You get to merge the codes from an experimental branch to the master branch.
-git merge master coins
-git merge destination_branch temp_branch
