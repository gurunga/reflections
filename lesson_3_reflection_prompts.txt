When would you want to use a remote repository rather than keeping all your work local?
- If multiple collaborators are working on a same project.
- Storing all your work on a single local hard disk might risk losing it due to disk failure.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
- To avoid conflict with my local repository.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
- Forks: A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project.
  Clones: A clone is simply a copy of a repository.
  Branches: A branch is something that is within a repository. Conceptually, it represents a thread of development.

What is the benefit of having a copy of the last known state of the remote stored locally?
- We can work offline. For example, before boarding a flight, get a copy of the last known state of remote repo.
 Then during the flight, you can work offline.
 When you get back online, you can always fetch and merge your code with the remote repo.

Option 1: git pull origin master

Option 2: a) git fetch origin
          b) switch to master branch
          c) git merge master origin/master

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
- Without Git, we have to collaborate by sharing code snippet through emails or through chat.
- Easier: Don't need an extra tool like GIT to collaborate
- Harder: To merge codes together and keep track of commits (who, what, when)

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
-Background: Rather than simply pulling and pushing, you need to pull changes into your local master branch, merge the local master into your branch (different-oil, in our case), then push your branch to the remote before finally merging your branch into master, either locally or on GitHub.
We would want to make changes in a separate branch if we want other people to collaborate with us. We can always create a branch, then invite other collaborators using GitHub's pull request. Once everything thing looks fine, the branch can be merged into master. The temp branch can then be deleted(optional).
Or if we are working on an experimental feature and don't want to directly apply commits to our master.
